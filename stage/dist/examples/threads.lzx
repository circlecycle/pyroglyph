

<canvas title="Handlers Test" import="time, math" framerate="60" fullscreen="false"> 
  
  <!-- includes we need (name is optional! depends on whether you need
       access, or just the class definitions -->
  <include name="basic" src="basic"/>
  
  <font name="myfont" size='8'/>
    
  <class name="collection" extends="node">
    <attribute name="data" value="[]"/>
    <method name="push" args="what">
      self.data.append(what)
    </method>
    
    <method name="pop">
      return self.data.pop()
    </method>
    
    <method name="get">
      return self.data
    </method>
  </class>
    
  <class name="cool" bgcolor="blue" width="10" height="10">
      <view x="10" bgcolor="green" width="10" height="10"/>
      <view x="20" bgcolor="red" width="10" height="10"/>
  </class>
  
  <class name="dragtextbox" focusable="true" bgcolor="white" fgcolor="black" opacity="0.8">
    <simplelayout axis="y"/>

    <text focusble="true" name="txt" width="${parent.width}" height="20" text="Drag this to drag window">
      <handler name="onmousedown">
        self.offsetx = canvas.mousex-parent.x
        self.offsety = canvas.mousey-parent.y
      </handler>
      <handler name="onmousedrag">
        parent.x = canvas.mousex-self.offsetx
        parent.y = canvas.mousey-self.offsety
      </handler>
    </text>

    <textbox y="20" name="box" width="${parent.width}" height="80" fgcolor="white" opacity="0.7"/>
  </class>
  
  <class name="squared" extends="view">
    <handler name="oninit">
      canvas.basic.anim.osc(xaxis, 'spacing', -20, 20, 4)
    </handler>
    
    <simplelayout name="xaxis" axis="x" spacing="0"/>
    
    <view width="10" height="10" bgcolor="red"/>
    <view width="10" height="10" bgcolor="green"/>
    <view width="10" height="10" bgcolor="blue"/>
    <view width="10" height="10" bgcolor="black"/>
    <view width="10" height="10" bgcolor="white"/>
    <view width="10" height="10" bgcolor="gray"/>
    <view width="10" height="10" bgcolor="red"/>
    <view width="10" height="10" bgcolor="green"/>
    <view width="10" height="10" bgcolor="blue"/>
    <view width="10" height="10" bgcolor="black"/>
    <view width="10" height="10" bgcolor="white"/>
    <view width="10" height="10" bgcolor="gray"/>
    <view width="10" height="10" bgcolor="red"/>
    <view width="10" height="10" bgcolor="green"/>
    <view width="10" height="10" bgcolor="blue"/>
    <view width="10" height="10" bgcolor="black"/>
    <view width="10" height="10" bgcolor="white"/>
    <view width="10" height="10" bgcolor="gray"/>
    <view width="10" height="10" bgcolor="red"/>
    <view width="10" height="10" bgcolor="green"/>
    <view width="10" height="10" bgcolor="blue"/>
    <view width="10" height="10" bgcolor="black"/>
    <view width="10" height="10" bgcolor="white"/>
    <view width="10" height="10" bgcolor="gray"/>
    <view width="10" height="10" bgcolor="red"/>
    <view width="10" height="10" bgcolor="green"/>
    <view width="10" height="10" bgcolor="blue"/>
  </class>

  <!-- a collection is a list of items -->
  <collection name="stuff">
    <handler name="oninit">
      self.push(1)
      self.push(2)
      print self.get()
      print self.pop()
      print self.pop()
    </handler>
  </collection>
  
  <cool x="80" y="20"> 
      <view x="30" bgcolor="0xff00ff" width="10" height="10"/>
  </cool>
  
  <!-- on init fire off calls to the animate thread for both boxes defined below -->
  <handler name="oninit">
    # make things pulse
    self.basic.anim.osc(canvas.ct, 'opacity', 0.01, 0.5, 2)
    self.basic.anim.osc(canvas.ct, 'y', 400, 100, 5)
    self.basic.anim.osc(canvas.ct, 'x', 100, 400, 4)
    self.basic.anim.osc(canvas.sidebar, 'opacity', 0.1, 0.5, 2)
  </handler>
  
  <blueview x="0" y="${canvas.height->(canvas.height/2)-(self.height/2)}" width="${canvas.width}" height="200" opacity="0.3"/>
  <blueview name="sidebar" x="${canvas.width->canvas.width-self.width}" y="0" width="20" height="${canvas.height}" opacity="0"/>
  
  <!-- make three views to animate -->
  <view name="boxes" x="200" y="200">
    <handler name="oninit">
      #make things swoosh
      canvas.basic.anim.swirl(self.one, 0.02, 0.04)
      canvas.basic.anim.swirl(self.two, 0.03, 0.03)
      canvas.basic.anim.swirl(self.three, 0.04, 0.02)
    </handler>
    <view name="one" opacity="0.5" bgcolor="black"/>
    <view name="two" opacity="0.5" bgcolor="black"/>
    <view name="three" opacity="0.5" bgcolor="black"/>
  </view>
  
  <!-- make a grid of squares -->
  <view name="overload" x="300" y="400" bgcolor="0xffffff">
    
    <handler name="oninit">
      canvas.basic.anim.osc(self, 'x', 1, 400, 2)
      canvas.basic.anim.osc(self, 'y', 1, 400, 3)
      canvas.basic.anim.osc(self, 'opacity', 0.0, 0.8, 2)
      canvas.basic.anim.osc(yaxis, 'spacing', -100, 100, 2.5)
      canvas.basic.anim.osc(xaxis, 'spacing', -100, 100, 4)
    </handler>
    
    <handler name="onx">
        canvas.status.one.text = int(self.x)
        canvas.status.two.text = int(self.y)
    </handler>
    
    <simplelayout name="yaxis" axis="y" spacing="10"/>
    <simplelayout name="xaxis" axis="x" spacing="5"/>
    
    <squared/>
    <squared/>
    <squared/>
    <squared/>
    <squared/>
  </view>
  
  <!-- a view that syncs to another (moving) view -->
  <view name="ct" x="200" y="200" bgcolor="0xff0000" 
                  height="${parent.boxes.one.height}" 
                  width="${parent.boxes.one.width -> parent.boxes.one.width * 2}" 
                  opacity="0.5"/>
    
  <!-- an info widget -->
  <include name="info_widget" src="widgets/info.lzx"/>
  
  <view x="200" name="status">
    <handler name="oninit">
      canvas.basic.anim.osc(self.l, 'spacing', 30, 90, 5)
    </handler>
    <simplelayout name="l" axis="y" spacing="30"/>
    <text text="System Stats"/>
    <text name="one" font="myfont" bgcolor="black" opacity="0.7"/>
    <text name="two" bgcolor="black" opacity="0.7"/>
  </view>
  
  <!-- why doesn't simplelayout work with text??? -->
  <dragtextbox x="180" y="240" width="200" />
  <dragtextbox x="400" y="300" width="300" />
  
  <text x="${canvas.width->canvas.width-self.width}" width="100" text="Press ESC to exit"/>
    
</canvas>