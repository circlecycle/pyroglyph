
<library import="time">

  <thread name="osc" args="what, attrname, start, end, dur">
    <![CDATA[
      #normalize start/end into low/high
      low, high = min(start,end), max(start, end)
    
      #floatify arguments
      high, low, dur = float(high), float(low), float(dur)/2
    
      #set up scale
      if high-low <= 1: scale = 0.01
      else:             scale = 1
    
      #calulate delay and increment factors
      delay = scale/((high-low)/dur)
      inc = scale/dur
    
      #set the object to the first given bound
      what[attrname] = start
    
      #and endlesly oscillate between the two values
      while 1:
        while 1:
          what[attrname] += inc
          if what[attrname] >= high: break
          time.sleep(delay)
        while 1:
          what[attrname] -= inc
          if what[attrname] <= low: break
          time.sleep(delay)
    ]]>
  </thread>

  <thread name="animate" args="what, attrname, start, end, dur">
    <![CDATA[
      #normalize start/end into low/high
      if start > end: direction = "down"
      else:           direction = "up"
      
      low, high = min(start,end), max(start, end)

      #floatify arguments
      high, low, dur = float(high), float(low), float(dur)/2

      #set up scale
      if high-low <= 1: scale = 0.01
      else:             scale = 1

      #calulate delay and increment factors
      delay = scale/((high-low)/dur)
      inc = scale/dur

      #set the object to the first given bound
      what[attrname] = start

      #and go to the ending value and stop
      if direction == "down": inc = -inc
      while what[attrname] < high:
        what[attrname] += inc
        time.sleep(delay)
    ]]>
  </thread>

  <thread name="swirl" args="what, inc, sleep">
    i = 0.01
    while 1:
      i = (i+inc)%(3.14*2)
      what.x = math.cos(i)*100
      what.y = math.sin(i)*100
      what.width = math.sin(i)*200
      what.height = math.sin(i)*200
      what.bgcolor = "%s, %s, %s"%(i%1, i/2%1, i/3%1)
      time.sleep(sleep)
  </thread>
  
  <class name="draggable" extends="node">
    <attribute name="axis" type="string"/>
    
    <attribute name="target" value="parent"/>
    
    <handler on="mousedown" reference="parent">
      self.offsetx = canvas.mousex-target.x
      self.offsety = canvas.mousey-target.y
    </handler>
    
    <handler on="mousedrag" reference="parent">
      axis = self['axis']
      
      if not axis:
        target.x = canvas.mousex-self.offsetx
        target.y = canvas.mousey-self.offsety
        
      elif axis == 'x':
        target.x = canvas.mousex-self.offsetx
        
      elif axis == 'y':
        target.y = canvas.mousey-self.offsety
    </handler>
  </class>
  
  <class name="draggable1" extends="node">
    <attribute name="axis" type="string"/>
    
    <attribute name="target" value="parent"/>
    
    <handler on="mousedown">
      self.offsetx = canvas.mousex-target.x
      self.offsety = canvas.mousey-target.y
    </handler>
    
    <handler on="mousedrag">
      axis = self['axis']
      
      if not axis:
        target.x = canvas.mousex-self.offsetx
        target.y = canvas.mousey-self.offsety
        
      elif axis == 'x':
        target.x = canvas.mousex-self.offsetx
        
      elif axis == 'y':
        target.y = canvas.mousey-self.offsety
    </handler>
  </class>
  
</library>
